# -*- coding: utf-8 -*-

"""
/***************************************************************************
 VegetationQualityIndex
                                 A QGIS plugin
 This plugin computes the vegetation quality index
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-26
        copyright            : (C) 2021 by SpaceIn
        email                : spacein.io
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'SpaceIn'
__date__ = '2021-02-26'
__copyright__ = '(C) 2021 by SpaceIn'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#Import all Qt files
from PyQt5.Qt import *

#Import precessing modules
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingLayerPostProcessorInterface,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterLayer,
                       QgsRasterShader,
                       QgsColorRampShader,
                       QgsPresetSchemeColorRamp,
                       QgsRasterBandStats,
                       QgsSingleBandPseudoColorRenderer)

from .utils import open_and_reproject_raster


class VegetationQualityIndexAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    FIRE_RISK = 'FIRE_RISK'
    DROUGHT_RESISTANCE = 'DROUGHT_RESISTANCE'
    VEGETATION_COVER = 'VEGETATION_COVER'
    EROSION_PROTECTION = 'EROSION_PROTECTION'
    REF_RASTER = 'REF_RASTER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFile(
                self.FIRE_RISK,
                description=self.tr('Fire risk input raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.DROUGHT_RESISTANCE,
                description=self.tr('Drought resistance input raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.VEGETATION_COVER,
                description=self.tr('vegetation cover input raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.EROSION_PROTECTION,
                description=self.tr('Erosion protection input raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.REF_RASTER,
                description=self.tr('Reference raster (used for automated extent, cellsize, and CRS)'),
                extension='tif'
            )
        )

        #Add a destinatin for th output of the file
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Vegetation Quality Index output raster'), 'TIFF files (*.tif)'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        ref_file = self.parameterAsOutputLayer(parameters, self.REF_RASTER, context)
        ref_rast = gdal.Open(ref_file, gdal.GA_ReadOnly)

        #Open fire rist raster
        fr_file = self.parameterAsFile(parameters, self.FIRE_RISK, context)
        fr_rast = open_and_reproject_raster(fr_file, ref_file, feedback)
        fr_band = fr_rast.GetRasterBand(1)

        #Open Drought resistance raster
        dr_file = self.parameterAsFile(parameters, self.DROUGHT_RESISTANCE, context)
        dr_rast = open_and_reproject_raster(dr_file, ref_file, feedback)
        dr_band = dr_rast.GetRasterBand(1)

        #Open vegetation cover raster
        vc_file = self.parameterAsFile(parameters, self.VEGETATION_COVER, context)
        vc_rast = open_and_reproject_raster(vc_file, ref_file, feedback)
        vc_band = vc_rast.GetRasterBand(1)

        #Open Erosion protection raster
        ep_file = self.parameterAsFile(parameters, self.EROSION_PROTECTION, context)
        ep_rast = open_and_reproject_raster(ep_file, ref_file, feedback)
        ep_band = ep_rast.GetRasterBand(1)

        # Open the output raster for writing into Geotiff
        xorigin, xres, xskew, yorigin, yskew, yres = ref_rast.GetGeoTransform()
        cols = ref_rast.RasterXSize
        rows = ref_rast.RasterYSize
        output_file = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
        driver = gdal.GetDriverByName("GTiff")
        out_rast = driver.Create(output_file, cols, rows, 1, gdal.GDT_Float64)
        out_rast.SetGeoTransform((xorigin, xres, 0, yorigin, 0, yres))
        out_band = out_rast.GetRasterBand(1)

        # Process the raster datasets in chunks/bolocks
        block_xsize, block_ysize = fr_band.GetBlockSize()
        for b_y, yoff in enumerate(range(0, fr_rast.RasterYSize, block_ysize)):
            for b_x, xoff in enumerate(range(0, fr_rast.RasterXSize, block_xsize)):
                win_xsize, win_ysize = fr_band.GetActualBlockSize(b_x, b_y)

                FR = fr_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                fr_nodata_mask = np.ma.masked_equal(FR, fr_band.GetNoDataValue()).mask
                FR = FR.astype('float64')
                FR = np.ma.masked_array(FR, fr_nodata_mask)

                DR = dr_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                dr_nodata_mask = np.ma.masked_equal(DR, dr_band.GetNoDataValue()).mask
                DR = DR.astype('float64')
                DR = np.ma.masked_array(DR, dr_nodata_mask)

                VC = vc_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                vc_nodata_mask = np.ma.masked_equal(VC, vc_band.GetNoDataValue()).mask
                VC = VC.astype('float64')
                VC = np.ma.masked_array(VC, vc_nodata_mask)

                EP = ep_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                ep_nodata_mask = np.ma.masked_equal(EP, ep_band.GetNoDataValue()).mask
                EP = EP.astype('float64')
                EP = np.ma.masked_array(EP, ep_nodata_mask)

                #calculate the vegetaion quality index
                vqi = (FR * DR * VC * EP)**(1/4)
                # Fill the nodata value with QGIS's default
                vqi = vqi.filled(-3.4028230607370965e+38)

                # Write processed block to file
                out_band.WriteArray(vqi, xoff=xoff, yoff=yoff)

        out_band.SetNoDataValue(-3.4028230607370965e+38)
        outRasterSRS = osr.SpatialReference()
        outRasterSRS.ImportFromWkt(ref_rast.GetProjectionRef())
        out_rast.SetProjection(outRasterSRS.ExportToWkt())
        out_band.FlushCache()

        # Delete the variables, this actually triggers the writing of the output file
        out_rast = None
        out_band = None
        driver = None

        if context.willLoadLayerOnCompletion(output_file):
            context.layerToLoadOnCompletionDetails(output_file).setPostProcessor(
                ClimaticErosivityStylePostProcessor.create()
            )

        return {self.OUTPUT: output_file}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vegetation Quality Index (VQI)'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Algorithm for VQI layer'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return VegetationQualityIndexAlgorithm()
